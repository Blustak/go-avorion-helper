// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: systems.sql

package database

import (
	"context"
	"database/sql"
)

const addSystem = `-- name: AddSystem :one
INSERT INTO systems(name,x,y) VALUES(
    ?1,
    ?2,
    ?3
) RETURNING id, name, x, y
`

type AddSystemParams struct {
	SystemName sql.NullString
	SystemX    int64
	SystemY    int64
}

func (q *Queries) AddSystem(ctx context.Context, arg AddSystemParams) (System, error) {
	row := q.db.QueryRowContext(ctx, addSystem, arg.SystemName, arg.SystemX, arg.SystemY)
	var i System
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.X,
		&i.Y,
	)
	return i, err
}

const getAllSystems = `-- name: GetAllSystems :many
SELECT id, name, x, y FROM systems
`

func (q *Queries) GetAllSystems(ctx context.Context) ([]System, error) {
	rows, err := q.db.QueryContext(ctx, getAllSystems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []System
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.X,
			&i.Y,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
